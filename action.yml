name: Bootc Image Builder
description: Build bootc images into disk images or ISOs

inputs:
  config-file:
    description: 'Path to the config file'
    required: true
  type:
    description: 'Type of image to build. Supported values: iso, raw, qcow2, vmdk, vdh, ami, gce'
    required: false
    default: 'iso'
  image:
    description: 'Name of the image (e.g. ghcr.io/myorg/myimage:latest)'
    required: true
  bootc-image-builder-image:
    description: 'Name of the bootc image builder image'
    required: false
    default: 'quay.io/centos-bootc/bootc-image-builder:latest'
  use-librepo:
    description: 'Use librepo for downloading packages for the output image. (can break if you are using an old bib image)'
    required: false
    default: false
  rootfs:
    description: 'Root filesystem type. Overrides the default from the source container. Supported values: ext4, xfs, btrfs'
    required: false
    default: ''

outputs:
  output-directory:
    description: 'Directory containing the built image'
    value: ${{ steps.set-outputs.outputs.output_directory }}
  output-path:
    description: 'Path to the built image'
    value: ${{ steps.set-outputs.outputs.path }}
  checksum-path:
    description: 'Checksum of the built image'
    value: ${{ steps.set-outputs.outputs.checksum_path }}
  checksum:
    description: 'Checksum of the built image'
    value: ${{ steps.set-outputs.outputs.checksum }}

runs:
  using: 'composite'
  steps:
    - name: Configure Podman
      shell: bash
      run: |
        sudo mkdir -p /etc/containers
        echo -e "[storage]\ndriver = \"overlay\"\nrunroot = \"/run/containers/storage\"\ngraphroot = \"/var/lib/containers/storage\"" \
          | sudo tee /etc/containers/storage.conf

        # workaround https://github.com/containers/podman/issues/21683
        sudo apt install -y sqlite3
        echo "update DBConfig set GraphDriver = 'overlay' where GraphDriver = '';" | sudo sh -c '(cd /var/lib/containers/storage && sqlite3 db.sql)'

    - name: Pull Image
      shell: bash
      run:
        sudo podman pull ${{ inputs.image }}

    - name: Build Bootable Image
      if: ${{ inputs.type == 'iso' || inputs.type == 'ami' || inputs.type == 'qcow2' || inputs.type == 'vmdk' || inputs.type == 'raw' || inputs.type == 'vhd' || inputs.type == 'gce' }}
      id: build
      shell: bash
      env:
        CONFIG_FILE: ${{ inputs.config-file }}
        IMAGE: ${{ inputs.image }}
        BOOTC_IMAGE_BUILDER_IMAGE: ${{ inputs.bootc-image-builder-image }}
        USE_LIBREPO: ${{ inputs.use-librepo }}
        IMAGE_TYPE: ${{ inputs.type }}
        ROOTFS: ${{ inputs.rootfs }}
      run: |
        DESIRED_UID=$(id -u)
        DESIRED_GID=$(id -g)

        CONFIG_FILE_EXTENSION="${CONFIG_FILE##*.}"
        mkdir -p ./output

        INPUT_ARGS=""
        [ "${USE_LIBREPO}" == "true" ] && INPUT_ARGS+="--use-librepo=True "
        [ -n "${ROOTFS}" ] && INPUT_ARGS+="--rootfs=${ROOTFS} "

        sudo podman run \
          --rm \
          --privileged \
          --pull=newer \
          --security-opt label=type:unconfined_t \
          -v $CONFIG_FILE:/config.$CONFIG_FILE_EXTENSION:ro \
          -v ./output:/output \
          -v /var/lib/containers/storage:/var/lib/containers/storage \
          $BOOTC_IMAGE_BUILDER_IMAGE \
          --type ${IMAGE_TYPE} \
          --local \
          --chown $DESIRED_UID:$DESIRED_GID \
          ${INPUT_ARGS} \
          $IMAGE

        case "${IMAGE_TYPE}" in
        "raw"|"ami") OUTPUT_DIRECTORY="./output/image" ;;
        "iso") OUTPUT_DIRECTORY="./output/bootiso" ;;
        "vhd") OUTPUT_DIRECTORY="./output/vpc" ;;
        *) OUTPUT_DIRECTORY="./output/${IMAGE_TYPE}" ;;
        esac

        ISO_PATH=(${OUTPUT_DIRECTORY}/*)

        # Create a checksum of the output file, stored in the same directory
        CHECKSUM=$(sha256sum $ISO_PATH | awk '{print $1}')
        CHECKSUM_PATH=${ISO_PATH}-CHECKSUM
        echo $CHECKSUM > ${CHECKSUM_PATH}

        echo "OUTPUT_DIRECTORY=$OUTPUT_DIRECTORY" >> $GITHUB_OUTPUT
        echo "CHECKSUM=$CHECKSUM" >> $GITHUB_OUTPUT
        echo "CHECKSUM_PATH=$CHECKSUM_PATH" >> $GITHUB_OUTPUT
        echo "ISO_PATH=$ISO_PATH" >> $GITHUB_OUTPUT

    - name: Set Outputs
      id: set-outputs
      shell: bash
      env:
        OUTPUT_DIRECTORY: ${{ steps.build.outputs.OUTPUT_DIRECTORY }}
        CHECKSUM: ${{ steps.build.outputs.CHECKSUM }}
        CHECKSUM_PATH: ${{ steps.build.outputs.CHECKSUM_PATH }}
        ISO_PATH: ${{ steps.build.outputs.ISO_PATH }}
      run: |
        echo "output_directory=$OUTPUT_DIRECTORY" >> $GITHUB_OUTPUT
        echo "checksum=$CHECKSUM" >> $GITHUB_OUTPUT
        echo "checksum_path=$CHECKSUM_PATH" >> $GITHUB_OUTPUT
        echo "path=$ISO_PATH" >> $GITHUB_OUTPUT
